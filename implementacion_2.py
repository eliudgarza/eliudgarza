# -*- coding: utf-8 -*-
"""Implementacion 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IFb4oqxCvA8k8Q706pBfLWNIO7cpzKR9

Eliud Garza A00827575
"""

from google.colab import drive
drive.mount("/content/gdrive")

!pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/gdrive/MyDrive/7mo Semestre/Modulo 2"

!ls

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

import missingno as msno 
from sklearn.model_selection import train_test_split

dset = pd.read_csv("brain_stroke.csv")

dset.head(5000)

msno.bar(dset)

dset.info()

dset.describe()

dset.hist(bins=35, figsize=(20,13))
plt.show()

cor = dset.corr()
cor

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(cor, dtype=bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(200, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(cor, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})

clean_cat = {"gender": {"Male":0, "Female": 1}, "ever_married": {"No":0,"Yes":1}, "work_type": {"Private":0, "Govt_job":1, "Self-employed":2, "children":3, "Neverworked":4}, "Residence_type": {"Rural":0, "Urban":1}, "smoking_status": {"never smoked":0, "Unknown":1,"formerly smoked":2, "smokes":3}}

dset = dset.replace(clean_cat)

dset.head()

X = dset.drop(["stroke"], axis = 1)
Y = dset["stroke"]

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33, random_state=42)

from sklearn.metrics import SCORERS
from sklearn.tree import DecisionTreeClassifier

decisionTree = DecisionTreeClassifier(max_depth = 4, min_samples_split = 2, min_samples_leaf = 1)
decisionTree.fit(X_train, y_train)
Y_pred = decisionTree.predict(X_test)
score = round(decisionTree.score(X_train, y_train) * 100, 2)
print('Decision Tree Classifier predicts with', score, '% of accuracy')